     1                                  ; 为什么每个模块的入口点都要用汇编来写?
     2                                  ; 因为只有汇编才能够精准控制首条指令
     3                                  
     4                                  ; 汇编为ELF格式,不能用org伪指令了
     5                                  ; org 0x8000
     6                                  extern loader_entry
     7                                  extern load_kernel
     8                                  
     9                                  ; 本文件将会使用elf编译,所以必须指定操作尺寸
    10                                  [bits 16]
    11                                  global _start ; 这是为了避免0x8048000的编译警告
    12                                  global kernel_datasg_init_16
    13                                  _start:
    14 00000000 E8(0000)                call loader_entry
    15                                  kernel_datasg_init_16:
    16                                  ; 可算是回来了
    17                                  ; 现在因为编译器的垃圾特性,堆栈与上条指令之前相比已经是不平衡的,之后要格外注意这个问题
    18                                  ; 设置相关的数据段寄存器
    19 00000003 B81000                  mov ax, 0x10
    20 00000006 8ED8                    mov ds, ax
    21 00000008 8EE0                    mov fs, ax
    22 0000000A 8EC0                    mov es, ax
    23 0000000C 8EE8                    mov gs, ax
    24                                  ; 注意:由于是通过段内调用的方式回到这里的,所以当前的默认操作尺寸仍然是16位!
    25 0000000E EA[1300]0800            jmp 0x8:kernel_datasg_init_32
    26                                  
    27                                  [bits 32]
    28                                  extern load_kernel
    29                                  kernel_datasg_init_32:
    30                                  ; 现在!已经是32位的操作尺寸!我向我熟悉的环境迈进了一大步!
    31                                  ; 当务之急是把内核部分加载进来
    32 00000013 E8(00000000)            call load_kernel
    33                                  ; 默认操作尺寸为32位时,编译器在函数调用上终于不抽风了
    34                                  ; 直接跳到0x100000地址处执行
    35 00000018 EA000010000800          jmp 0x8:0x100000
